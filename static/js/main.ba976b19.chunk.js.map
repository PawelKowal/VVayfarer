{"version":3,"sources":["api/axios.js","features/user/userSlice.js","features/login/LoginForm.js","features/login/RegisterForm.js","features/login/LoginPage.js","features/posts/PostsList.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","getUser","createAsyncThunk","userId","a","get","response","data","userAdapter","createEntityAdapter","userSlice","createSlice","name","initialState","getInitialState","status","error","reducers","userLoaded","setAll","extraReducers","pending","state","action","fulfilled","upsertOne","rejected","payload","actions","getSelectors","user","selectById","LoginForm","useState","email","setEmail","password","setters","handleChange","e","target","value","id","onSubmit","console","log","Grid","container","direction","spacing","item","TextField","type","label","variant","onChange","Button","color","RegisterForm","LoginPage","signUpButtonState","signUpButtonClicked","leftBox","Box","className","rightBox","onClick","registerDialog","Dialog","open","onClose","DialogTitle","DialogContent","DialogActions","Fragment","PostsList","App","exact","path","component","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba976b19.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://localhost:5001\",\r\n});\r\n\r\nexport default instance;\r\n","import {\r\n  createSlice,\r\n  createEntityAdapter,\r\n  createAsyncThunk,\r\n} from \"@reduxjs/toolkit\";\r\nimport axios from \"../../api/axios\";\r\n\r\nexport const getUser = createAsyncThunk(\"user/getUser\", async (userId) => {\r\n  const response = await axios.get(\"/api/users/\" + userId);\r\n  return response.data;\r\n});\r\n\r\nconst userAdapter = createEntityAdapter();\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: userAdapter.getInitialState({\r\n    status: \"idle\",\r\n    error: null,\r\n  }),\r\n  reducers: {\r\n    userLoaded: userAdapter.setAll,\r\n  },\r\n  extraReducers: {\r\n    [getUser.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n      state.error = null;\r\n    },\r\n    [getUser.fulfilled]: (state, action) => {\r\n      if (state.status === \"loading\") {\r\n        userAdapter.upsertOne(state, action);\r\n        state.status = \"succeeded\";\r\n      }\r\n    },\r\n    [getUser.rejected]: (state, action) => {\r\n      if (state.status === \"loading\") {\r\n        state.status = \"failed\";\r\n        state.error = action.payload;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { userLoaded } = userSlice.actions;\r\n\r\nexport const { selectById: selectUserById } = userAdapter.getSelectors(\r\n  (state) => state.user\r\n);\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, TextField, Button } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"./LoginForm.css\";\r\n\r\nexport const LoginForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const setters = {\r\n    email: setEmail,\r\n    password: setPassword,\r\n  };\r\n\r\n  let handleChange = (e) => {\r\n    setters[e.target.name](e.target.value);\r\n  };\r\n\r\n  let handleSubmit = (e) => {\r\n    console.log(\"submitted\");\r\n  };\r\n\r\n  return (\r\n    <form\r\n      id=\"login_form\"\r\n      onSubmit={() => {\r\n        console.log(\"XD\");\r\n      }}\r\n    >\r\n      <Grid container direction=\"column\" spacing={3}>\r\n        <Grid item>Let's go on a trip!</Grid>\r\n        <Grid item>\r\n          <TextField\r\n            type=\"email\"\r\n            name=\"email\"\r\n            label=\"E-mail\"\r\n            variant=\"filled\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          ></TextField>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            type=\"password\"\r\n            name=\"email\"\r\n            label=\"Password\"\r\n            variant=\"filled\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          ></TextField>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"outlined\" color=\"primary\">\r\n            Sign in\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\n\r\nexport const RegisterForm = () => {\r\n  return (\r\n    <div>\r\n      <form id=\"reg-form\">\r\n        <Grid container direction=\"column\" spacing={1}>\r\n          <Grid item>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"First name\"\r\n              variant=\"filled\"\r\n            ></TextField>\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField\r\n              type=\"text\"\r\n              label=\"Last name\"\r\n              variant=\"filled\"\r\n            ></TextField>\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField type=\"email\" label=\"E-mail\" variant=\"filled\"></TextField>\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              variant=\"filled\"\r\n            ></TextField>\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField\r\n              type=\"password\"\r\n              label=\"Repeat password\"\r\n              variant=\"filled\"\r\n            ></TextField>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Box,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogActions,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./LoginPage.css\";\r\n\r\nimport { LoginForm } from \"./LoginForm.js\";\r\nimport { RegisterForm } from \"./RegisterForm.js\";\r\n\r\nexport const LoginPage = () => {\r\n  const [signUpButtonState, signUpButtonClicked] = useState(false);\r\n\r\n  let leftBox = (\r\n    <Box className=\"leftBox\">\r\n      <Grid container direction=\"column\" spacing={2}>\r\n        <Grid item className=\"siteName\">\r\n          VVayfarer\r\n        </Grid>\r\n        <Grid item className=\"siteDescription\">\r\n          Welcome on my tourist social networking site.\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  let rightBox = (\r\n    <Box className=\"rightBox\">\r\n      <Grid container direction=\"column\" spacing={3}>\r\n        <Grid item>\r\n          <LoginForm />\r\n        </Grid>\r\n        <Grid item>Don't have account?</Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => signUpButtonClicked(true)}\r\n          >\r\n            Sign up\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n\r\n  let registerDialog = (\r\n    <Dialog open={signUpButtonState} onClose={() => signUpButtonClicked(false)}>\r\n      <DialogTitle id=\"form-dialog-title\" className=\"dialogTitle\">\r\n        Create account\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <RegisterForm />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={() => signUpButtonClicked(false)}\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n        >\r\n          Sign up\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction=\"row\">\r\n        {leftBox}\r\n        {rightBox}\r\n      </Grid>\r\n      {registerDialog}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const PostsList = () => {\r\n  return <div>Hello</div>;\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { User } from \"./features/user/User\";\r\nimport { LoginPage } from \"./features/login/LoginPage.js\";\r\nimport { PostsList } from \"./features/posts/PostsList.js\";\r\nimport { RegisterForm } from \"./features/login/RegisterForm.js\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Route exact path=\"/VVayfarer\" component={LoginPage} />\r\n      <Route exact path=\"/VVayfarer/posts\" component={PostsList} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/user/userSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.Fragment>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}